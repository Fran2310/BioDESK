// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//prisma/lab/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "./../../node_modules/@prisma/client-lab"
}

datasource db {
  provider = "postgresql"
  url      = env("DYNAMIC_DATABASE_URL") // Cambiamos a una variable que configuraremos dinámicamente
}

model LabUser {
  id             Int      @id @default(autoincrement())
  systemUserUuid String   @db.Uuid   @unique // Relación con SystemUser.uuid
  roleId         Int?
  role           Role?    @relation(fields: [roleId], references: [id])

  actionHistory        ActionHistory[]
}

model Role {
  id          Int      @id @default(autoincrement())
  role        String   @unique
  description String
  permissions Json
  
  users       LabUser[]
}

model ActionHistory {
  id        Int        @id @default(autoincrement())

  action    String  // create, update, delete, etc
  details   String  // Texto para el usuario

  entity         String   // Nombre de la entidad: Patient, MedicHistory, etc.
  recordEntityId String   // ID del registro afectado (como string)
  operationData  Json     // Snapshot del cambio (antes/después o solo input)
  
  madeAt    DateTime @default(now())

  labUserId Int           // Quien lo hizo
  labUser   LabUser    @relation(fields: [labUserId], references: [id])
}

model Patient {
  id             Int      @id @default(autoincrement())
  ci             String   @unique
  name           String
  lastName       String
  secondName     String?
  secondLastName String?
  email          String   @unique
  phoneNums      String[] @default([""])
  dir            String
  birthDate      DateTime?

  medicHistory MedicHistory?
}

model MedicHistory {
  id          Int        @id @default(autoincrement())
  allergies   String?
  pathologies String?

  patientId   Int        @unique
  patient     Patient    @relation(fields: [patientId], references: [id])

  requestMedicTests RequestMedicTest[]
}

model RequestMedicTest {
  id              Int      @id @default(autoincrement())
  requestedAt     DateTime
  completedAt     DateTime? 
  state           State      @default(PENDING)
  priority        Priority   @default(MEDIUM)
  resultProperties Json?
  observation     String?

  medicHistoryId  Int
  medicHistory    MedicHistory    @relation(fields: [medicHistoryId], references: [id])

  medicTestCatalogId Int
  medicTestCatalog   MedicTestCatalog   @relation(fields: [medicTestCatalogId], references: [id])
}

model MedicTestCatalog {
  id              Int      @id   @default(autoincrement())
  name            String   @unique
  description     String?
  properties      Json?
  supplies        String[] @default([""])
  price           Float

  requestMedicTests RequestMedicTest[]
}

enum State {
  PENDING
  IN_PROCESS
  TO_VERIFY
  CANCELED
  COMPLETED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}